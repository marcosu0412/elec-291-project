; Marco su
; Seamus Munkholm

$NOLIST
$MOD9351
$LIST

org 0x0000
    ljmp main

; Timer/Counter 0 overflow interrupt vector
org 0x000B
	ljmp Timer0_ISR


; Timer/Counter 2 overflow interrupt vector
org 0x005B
	ljmp CCU_ISR	



$NOLIST
$include(LCD_4bit.inc)
$LIST

$NOLIST
$include(math32.inc)
$LIST

;-------------------------------------------;
;               Constants                   ;
;-------------------------------------------;
CLK                 EQU 14746000 ; Microcontroller system crystal frequency in Hz
TIMER0_RATE         EQU 1000     ; 1000Hz, for a timer tick of 1ms
TIMER0_RELOAD       EQU ((65536-(CLK/(12*CCU_RATE))))
CCU_RATE 			EQU 22050
CCU_RELOAD 			EQU ((65536-(CLK/(2*CCU_RATE))))
PEAK_TEMPERATURE    EQU 260
XTAL                EQU 7373000
BAUD                EQU 115200
BRVAL               EQU ((XTAL/BAUD)-16)

FLASH_CE EQU P2.4

; Commands supported by the SPI flash memory according to the datasheet
WRITE_ENABLE     EQU 0x06  ; Address:0 Dummy:0 Num:0
WRITE_DISABLE    EQU 0x04  ; Address:0 Dummy:0 Num:0
READ_STATUS      EQU 0x05  ; Address:0 Dummy:0 Num:1 to infinite
READ_BYTES       EQU 0x03  ; Address:3 Dummy:0 Num:1 to infinite
READ_SILICON_ID  EQU 0xab  ; Address:0 Dummy:3 Num:1 to infinite
FAST_READ        EQU 0x0b  ; Address:3 Dummy:1 Num:1 to infinite
WRITE_STATUS     EQU 0x01  ; Address:0 Dummy:0 Num:1
WRITE_BYTES      EQU 0x02  ; Address:3 Dummy:0 Num:1 to 256
ERASE_ALL        EQU 0xc7  ; Address:0 Dummy:0 Num:0
ERASE_BLOCK      EQU 0xd8  ; Address:3 Dummy:0 Num:0
READ_DEVICE_ID   EQU 0x9f  ; Address:0 Dummy:2 Num:1 to infinite

;-------------------------------------------;
;                Variables                  ;
;-------------------------------------------;

dseg at 0x30
Count1ms:   ds 2; Used to determine when half a second has passed
w:		    ds 3; 24-bit play counter. Decremented in CCU ISR
ctemp:      ds 2   ; current temperature
ctime:      ds 4   ; current time

rtemp:		ds 2   ; reflow  temperature
stemp:		ds 2   ; soak temperature
rtime:		ds 2   ; reflow time
stime:		ds 2   ; soak time
tt:         ds 1 ; temporary variable to hold stime 
ttemp: 	    ds 2 ; temporary temperature

adjust_state: ds 1
oven_state: ds 1

x: ds 4 ;for use in math32
y: ds 4
bcd: ds 5


;-------------------------------------------;
;                  Flags                    ;
;-------------------------------------------;

bseg
; For each pushbutton we have a flag.  The corresponding FSM will set this
; flags to one when a valid press of the pushbutton is detected.
soak_time_flag:         dbit 1
soak_temp_flag:         dbit 1
reflow_time_flag:       dbit 1
reflow_temp_flag:       dbit 1
abort_flag: 		    dbit 1 
mf:                     dbit 1
power_flag:             dbit 1 


;-------------------------------------------;
;         Pins and Constant Strings         ;
;-------------------------------------------;
cseg
LCD_RS equ P0.5
LCD_RW equ P0.6
LCD_E  equ P0.7
LCD_D4 equ P1.2
LCD_D5 equ P1.3
LCD_D6 equ P1.4
LCD_D7 equ P1.6

;---------------------------------;
; Button/Switch Pins		  ;
;---------------------------------;
sw_start_stop equ P3.1
sw_updown     equ P2.1
button_updown equ P2.6
button_state  equ P3.0
button_reset  equ P0.3

;---------------------------------;
; Temperature and Power		  ;
;---------------------------------;
TEMP_IN 	equ P1.7
POWER_OUT 	equ P0.0

;---------------------------------;
; Strings		  ;
;---------------------------------;

setsoaktime:
DB 'SOAK TIME', 0

setsoaktemperature:
DB 'SOAK TEMP', 0

setreflowtemperature:
DB 'REFLOW TEMP', 0

setreflowtime:
DB 'Reflow Time', 0

displaystate1:
DB 'Preheat ', 0

displaystate2:
DB 'Soaking ', 0

displaystate3:
DB 'Ramping ', 0

displaystate4:
DB 'Reflow  ', 0

displaystate5:
DB 'Cooling ', 0

displayabort:
DB 'Aborting...', 0

HexAscii: 
db '0123456789ABCDEF'

defaultstate:
DB 'Press button to' , 0 

defaulstate2:
DB 'adjust or start' , 0

;---------------------------------;
; Initializing Timer0             ;
;---------------------------------;
Timer0_Init:
	mov a, TMOD
	anl a, #0xf0 ; Clear the bits for timer 0
	orl a, #0x01 ; Configure timer 0 as 16-timer
	mov TMOD, a
	mov TH0, #high(TIMER0_RELOAD)
	mov TL0, #low(TIMER0_RELOAD)
	; Enable the timer and interrupts
    setb ET0  ; Enable timer 0 interrupt
    setb TR0  ; Start timer 0
	ret

;---------------------------------;
; ISR for timer 0.  Set to execute;
; every 1/4096Hz to generate a    ;
; 2048 Hz square wave at pin P3.7 ;
;---------------------------------;
Timer0_ISR:
	clr TF0  ; Timer 0 doesn't clear TF2 automatically. Do it in ISR
		     ; The two registers used in the ISR must be saved in the stac
    push acc
	push psw
	
	; Increment the 16-bit one mili second counter
	inc Count1ms+0    ; Increment the low 8-bits first
	mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
	jnz Inc_Done
	inc Count1ms+1
	
	

Inc_Done:
	; Check if full second has passed
	mov a, Count1ms+0
	cjne a, #low(1000), Timer0_ISR_done ; Warning: this instruction changes the carry flag!
	mov a, Count1ms+1
	cjne a, #high(1000), Timer0_ISR_done
	
	inc ctime

	clr a
	mov Count1ms+0, a
	mov Count1ms+1, a
	; Increment the current time counter

Timer0_ISR_done:
	pop psw
	pop acc
	reti

;---------------------------------;
; Initializing CCU                ;
;---------------------------------;
CCU_Init:
	mov TH2, #high(CCU_RELOAD)
	mov TL2, #low(CCU_RELOAD)
	mov TOR2H, #high(CCU_RELOAD)
	mov TOR2L, #low(CCU_RELOAD)
	mov TCR21, #10000000b ; Latch the reload value
	mov TICR2, #10000000b ; Enable CCU Timer Overflow Interrupt
	setb ECCU ; Enable CCU interrupt
	setb TMOD20 ; Start CCU timer
	ret

;---------------------------------;
; ISR for CCU.  Used to playback  ;
; the WAV file stored in the SPI  ;
; flash memory.                   ;
;---------------------------------;
CCU_ISR:
	mov TIFR2, #0 ; Clear CCU Timer Overflow Interrupt Flag bit. Actually, it clears all the bits!
	setb P2.6 ; To check the interrupt rate with oscilloscope.
	
	; The registers used in the ISR must be saved in the stack
	push acc
	push psw
	
	; Check if the play counter is zero.  If so, stop playing sound.
	mov a, w+0
	orl a, w+1
	orl a, w+2
	jz stop_playing
	
	; Decrement play counter 'w'.  In this implementation 'w' is a 24-bit counter.
	mov a, #0xff
	dec w+0
	cjne a, w+0, keep_playing
	dec w+1
	cjne a, w+1, keep_playing
	dec w+2
	
keep_playing:

	lcall Send_SPI ; Read the next byte from the SPI Flash...
	mov AD1DAT3, a ; and send it to the DAC
	
	sjmp CCU_ISR_Done

stop_playing:
	clr TMOD20 ; Stop CCU timer
	setb FLASH_CE  ; Disable SPI Flash

CCU_ISR_Done:	
	pop psw
	pop acc
	clr P2.6
	reti

;---------------------------------;
; Initial configuration of ports. ;
; After reset the default for the ;
; pins is 'Open Drain'.  This     ;
; routine changes them pins to    ;
; Quasi-bidirectional like in the ;
; original 8051.                  ;
; Notice that P1.2 and P1.3 are   ;
; always 'Open Drain'. If those   ;
; pins are to be used as output   ;
; they need a pull-up resistor.   ;
;---------------------------------;
Ports_Init:
    ; Configure all the ports in bidirectional mode:
    mov P0M1, #00H
    mov P0M2, #00H
    mov P1M1, #00H
    mov P1M2, #00H ; WARNING: P1.2 and P1.3 need 1 kohm pull-up resistors if used as outputs!
    mov P2M1, #00H
    mov P2M2, #00H
    mov P3M1, #00H
    mov P3M2, #00H
	ret

;---------------------------------;
; Sends a byte via serial port    ;
;---------------------------------;
putchar:
	jbc	TI,putchar_L1
	sjmp putchar
putchar_L1:
	mov	SBUF,a
	ret

;---------------------------------;
; Receive a byte from serial port ;
;---------------------------------;
getchar:
	jbc	RI,getchar_L1
	sjmp getchar
getchar_L1:
	mov	a,SBUF
	ret

Wait10us:
    mov R0, #18
    djnz R0, $ ; 2 machine cycles-> 2*0.27126us*18=10us
	ret

Wait1S:
	mov R2, #40
L3_1:	mov R1, #250
L2_1:	mov R0, #184
L1_1:	djnz R0, L1_1 ; 2 machine cycles-> 2*0.27126us*184=100us
	djnz R1, L2_1 ; 100us*250=0.025s
	djnz R2, L3_1 ; 0.025s*40=1s
	ret


;---------------------------------;
; Initialize the serial port      ;
;---------------------------------;
InitSerialPort:
	mov	BRGCON,#0x00
	mov	BRGR1,#high(BRVAL)
	mov	BRGR0,#low(BRVAL)
	mov	BRGCON,#0x03 ; Turn-on the baud rate generator
	mov	SCON,#0x52 ; Serial port in mode 1, ren, txrdy, rxempty
	; Make sure that TXD(P1.0) and RXD(P1.1) are configured as bidrectional I/O
	anl	P1M1,#11111100B
	anl	P1M2,#11111100B
	ret

;---------------------------------;
; Initialize ADC1/DAC1 as DAC1.   ;
; Warning, the ADC1/DAC1 can work ;
; only as ADC or DAC, not both.   ;
; The P89LPC9351 has two ADC/DAC  ;
; interfaces.  One can be used as ;
; ADC and the other can be used   ;
; as DAC.  Also configures the    ;
; pin associated with the DAC, in ;
; this case P0.4 as 'Open Drain'. ;
;---------------------------------;
InitDAC:
    ; Configure pin P0.4 (DAC1 output pin) as open drain
	orl	P0M1,   #00010000B
	orl	P0M2,   #00010000B
    mov ADMODB, #00101000B ; Select main clock/2 for ADC/DAC.  Also enable DAC1 output (Table 25 of reference manual)
	mov	ADCON1, #00000100B ; Enable the converter
	mov AD1DAT3, #0x80     ; Start value is 3.3V/2 (zero reference for AC WAV file)
	ret

;---------------------------------;
; Change the internal RC osc. clk ;
; from 7.373MHz to 14.746MHz.     ;
;---------------------------------;
Double_Clk:
    mov dptr, #CLKCON
    movx a, @dptr
    orl a, #00001000B ; double the clock speed to 14.746MHz
    movx @dptr,a
	ret

;---------------------------------;
; Initialize the SPI interface    ;
; and the pins associated to SPI. ;
;---------------------------------;
Init_SPI:
	; Configure MOSI (P2.2), CS* (P2.4), and SPICLK (P2.5) as push-pull outputs (see table 42, page 51)
	anl P2M1, #low(not(00110100B))
	orl P2M2, #00110100B
	; Configure MISO (P2.3) as input (see table 42, page 51)
	orl P2M1, #00001000B
	anl P2M2, #low(not(00001000B)) 
	; Configure SPI
	mov SPCTL, #11010000B ; Ignore /SS, Enable SPI, DORD=0, Master=1, CPOL=0, CPHA=0, clk/4
	ret

;---------------------------------;
; Sends AND receives a byte via   ;
; SPI.                            ;
;---------------------------------;
Send_SPI:
	mov SPDAT, a
Send_SPI_1:
	mov a, SPSTAT 
	jnb acc.7, Send_SPI_1 ; Check SPI Transfer Completion Flag
	mov SPSTAT, a ; Clear SPI Transfer Completion Flag
	mov a, SPDAT ; return received byte via accumulator
	ret

;---------------------------------;
; SPI flash 'write enable'        ;
; instruction.                    ;
;---------------------------------;
Enable_Write:
	clr FLASH_CE
	mov a, #WRITE_ENABLE
	lcall Send_SPI
	setb FLASH_CE
	ret

;---------------------------------;
; This function checks the 'write ;
; in progress' bit of the SPI     ;
; flash memory.                   ;
;---------------------------------;
Check_WIP:
	clr FLASH_CE
	mov a, #READ_STATUS
	lcall Send_SPI
	mov a, #0x55
	lcall Send_SPI
	setb FLASH_CE
	jb acc.0, Check_WIP ;  Check the Write in Progress bit
	ret

InitADC:
	; ADC0_0 is connected to P1.7
	; ADC0_1 is connected to P0.0
	; ADC0_2 is connected to P2.1
	; ADC0_3 is connected to P2.0
    ; Configure pins P1.7, P0.0, P2.1, and P2.0 as inputs
    orl P0M1, #00000001b
    anl P0M2, #11111110b
    orl P1M1, #10000000b
    anl P1M2, #01111111b
    orl P2M1, #00000011b
    anl P2M2, #11111100b
	; Setup ADC0
	setb BURST0 ; Autoscan continuos conversion mode
	mov	ADMODB,#0x20 ;ADC0 clock is 7.3728MHz/2
	mov	ADINS,#0x0f ; Select the four channels of ADC0 for conversion
	mov	ADCON0,#0x05 ; Enable the converter and start immediately
	; Wait for first conversion to complete
InitADC_L1:
	mov	a,ADCON0
	jnb	acc.3,InitADC
	ret


; The 8-bit hex number passed in the accumulator is converted to
; BCD and stored in [R1, R0]
Hex_to_bcd_8bit:
	mov b, #100
	div ab
	mov R1, a   ; After dividing, a has the 100s
	mov a, b    ; Remainder is in register b
	mov b, #10
	div ab ; The tens are stored in a, the units are stored in b 
	swap a
	anl a, #0xf0
	orl a, b
	mov R0, a
	ret


SendTemp:
	mov dptr, #HexAscii 
	
	mov a, bcd+1
	swap a
	anl a, #0xf
	movc a, @a+dptr
	lcall putchar
	mov a, bcd+1
	anl a, #0xf
	movc a, @a+dptr
	lcall putchar

	mov a, #'.'
	lcall putchar

	mov a, bcd+0
	swap a
	anl a, #0xf
	movc a, @a+dptr
	lcall putchar
	mov a, bcd+0
	anl a, #0xf
	movc a, @a+dptr
	lcall putchar
	
	mov a, #'\r'
	lcall putchar
	mov a, #'\n'
	lcall putchar	
	ret
	
SendString:
    clr a
    movc a, @a+dptr
    jz SendString_L1
    lcall putchar
    inc dptr
    sjmp SendString  
SendString_L1:
	ret





;Function to automatically adjust oven power depending on current and desired temperature (input a decimal in hex form)
Temp_Set:
	push acc
	mov a, ttemp+1
	cjne a, ctemp+1, carry_check
	mov a, ttemp
	cjne a, ctemp, carry_check
	pop acc				;if current temp and desired temp are the same, do nothing
	ret
Carry_check:
	jc Power_off 	;if ctemp larger than desired temp, turn off power
	sjmp Power_on	;else turn on power
Power_off:
    	clr POWER_OUT 
	pop acc
	ret
Power_on:
	setb POWER_OUT
	pop acc
	ret
;---------------------------------;
; Main program. Includes hardware ;
; initialization and 'forever'    ;
; loop.                           ;
;---------------------------------;
main:
	; Initialization of hardware
	mov SP, #0x7F
    lcall Ports_Init
    lcall LCD_4BIT 
    lcall InitADC
    lcall Init_SPI
    lcall CCU_Init
    lcall Timer0_Init
	; Turn off all the LEDs
	; mov LEDRA, #0 ; LEDRA is bit addressable
	; mov LEDRB, #0 ; LEDRB is NOT bit addresable
	setb EA   ; Enable Global interrupts
    ; Initialize variables
	clr abort_flag
    clr mf
    setb soak_temp_flag
    setb soak_time_flag
    setb reflow_temp_flag
    setb reflow_time_flag
	mov adjust_state, #0
	mov oven_state, #0
	mov ctemp, #0
   	mov rtemp, #0x17   ; minimum reflow  temperature
	mov rtemp+1, #0x02;
	mov stemp, #0x30   ; minimum soak temperature
	mov stemp+1, #0x01
	mov ctime, #0x00   ; current time
	mov ctime+1, #0x00
	mov stime, #0x60  ; soak time
	mov stime+1, #0x00
	mov rtime, #0x45   ; reflow time   
	mov rtime+1, #0x00
	mov tt, #0x00
    ljmp Default_state
	; After initialization the program stays in this 'forever' loop
	   ;starts off in default display screen until button pressed
    
Default_state:
    Set_Cursor(1,1)
    Send_Constant_String(#defaultstate)
    Set_Cursor(2,1)
    Send_Constant_String(#defaulstate2)

    jb button_state, loop
	Wait_Milli_Seconds(#50)	
	jb button_state, loop 
	jnb button_state, $
    
    jb sw_start_stop, check_flag

check_flag:
	WriteCommand(#0x01)
    jb soak_temp_flag, soak_temp
    jb soak_time_flag, to_soak_time
    jb reflow_temp_flag, to_reflow_temp
    jb reflow_time_flag, to_reflow_time
    ljmp loop 

to_soak_time:
    ljmp soak_time
to_reflow_temp:
    ljmp reflow_temp
to_reflow_time:
    ljmp reflow_time

loop:
    ljmp Default_state

;in each of these, change display and read button_updown to adjust
;also read button_state to inc adjust_state
soak_temp:
	
	Wait_Milli_Seconds(#90)
    Wait_Milli_Seconds(#90)
    Set_Cursor(1,1)
	Send_Constant_String(#setsoaktemperature)
	Set_Cursor(2,1)
	Display_BCD(stemp+1)
	Set_Cursor(2,3)
	Display_BCD(stemp)

check_button_state:
	jb button_state, soak_temp 
	Wait_Milli_Seconds(#50)	
	jb button_state, soak_temp
	jnb button_state, $
    
    cpl soak_temp_flag
    ljmp check_flag

    
check_updown_button:	
    jb button_updown, soak_temp  ;check if button_down is pressed. 
	Wait_Milli_Seconds(#50)	
	jb button_updown, soak_temp 
	jnb button_updown, $
   
    jb sw_updown, dec_soak_temp

inc_soak_temp:
   	mov a, stemp
   	add a, #0x01
    da a
    cjne a, #0x71, inc_soak_temp_1
    mov a, #0x30
    mov stemp, a
    ljmp check_updown_button

inc_soak_temp_1:
    mov stemp, a 
    ljmp check_updown_button

dec_soak_temp:
    mov a, stemp
    subb a, #0x01
    da a
    cjne a, #0x29,dec_soak_temp_1
    mov a, #0x70
    mov stemp, a
   	ljmp check_updown_button
dec_soak_temp_1:
    mov stemp, a
    ljmp check_updown_button


soak_time:
    Set_Cursor(1,1)
	Send_Constant_String(#setsoaktime)
	Set_Cursor(2,1)
	Display_BCD(stime)
	
check_button_state_2:
    jb button_state, soak_time
    Wait_Milli_Seconds(#50)	
    jb button_state, soak_time
    jnb button_state, $
    
    cpl soak_time_flag
    ljmp check_flag
    
check_updown_button_2:  
    jb button_updown, soak_time ; check if button_down is pressed. 
    Wait_Milli_Seconds(#50)	
    jb button_updown, soak_time
    jnb button_updown, $
    
	jb sw_updown, dec_soak_time

inc_soak_time:
    mov a, stime
    add a, #0x01
    da a
    cjne a, #0x91, inc_soak_time_1
    mov a, #0x60
    mov stime, a
    ljmp check_button_state_2
inc_soak_time_1:
   ljmp check_button_state_2
    
dec_soak_time:
    mov a, stime
    dec a 
    da a
    cjne a, #0x59,dec_soak_time_1
    mov a, #0x90
    mov stime, a
    ljmp check_updown_button_2
dec_soak_time_1:
   ljmp check_updown_button_2
    
    

reflow_temp:
    Set_Cursor(1,1)
	Send_Constant_String(#setreflowtemperature)    
	Set_Cursor(2,1)
	Display_BCD(rtemp+1)
    Set_Cursor(2,3)
    Display_BCD(rtemp)
	
check_button_state_3:
    jb button_updown, reflow_temp ; check if button_down is pressed. 
    Wait_Milli_Seconds(#50)	
    jb button_updown, reflow_temp
    jnb button_updown, $
    jb sw_updown, dec_reflow_temp

    cpl reflow_temp_flag
	ljmp check_flag

check_updown_button_3:  
    jb button_updown, reflow_temp ; check if button_down is pressed. 
    Wait_Milli_Seconds(#50)	
    jb button_updown, reflow_temp
    jnb button_updown, $
    
	jb sw_updown, dec_reflow_temp 


inc_reflow_temp:
    mov a, rtemp
    add a, #0x01
    da a
    cjne a, #0x31, inc_reflow_temp_1
    mov a, #0x19
    mov rtemp, a
    ljmp check_updown_button_3
inc_reflow_temp_1:
    ljmp check_updown_button_3
    
dec_reflow_temp:
    mov a, rtemp
    dec a 
    da a
    cjne a, #0x18, dec_reflow_temp_1
    mov a, #0x30
    mov rtemp, a
    ljmp check_updown_button_3
dec_reflow_temp_1:
    ljmp check_updown_button_3
;reflow_temp_done:
    ;jb button_state, reflow_temp
   ; Wait_Milli_Seconds(#50)	
   ; jb button_state, reflow_temp
   ; jnb button_state, $
   ; inc adjust_state
   ; ljmp param_adjust

reflow_time:
    Set_Cursor(1,1)
	Send_Constant_String(#setreflowtime) 
	Set_Cursor(2,1)   
	Display_BCD(rtime)

check_button_state_4:
    jb button_updown, reflow_time
    Wait_Milli_Seconds(#50)
    jb button_updown, reflow_time
    jnb button_updown, $
    jb sw_updown, dec_reflow_time
    
	setb reflow_time_flag
	setb reflow_temp_flag
	setb soak_time_flag
	setb soak_temp_flag
	ljmp check_flag

check_updown_button_4:  
    jb button_updown, reflow_time ; check if button_down is pressed. 
    Wait_Milli_Seconds(#50)	
    jb button_updown, reflow_time
    jnb button_updown, $
    
	jb sw_updown, dec_reflow_time
	
inc_reflow_time:
	mov a, rtime
	add a, #0x01
	da a
	cjne a, #0x60, inc_reflow_time_1
	mov a, #0x30
	mov rtime, a
	ljmp check_updown_button_4
inc_reflow_time_1:
	ljmp check_updown_button_4
	
dec_reflow_time:
	mov a, rtime
	dec a
	da a
	cjne a, #0x30, dec_reflow_time_1
	mov a, #0x60
	mov rtemp, a
	ljmp check_updown_button_4
dec_reflow_time_1:
	ljmp check_updown_button_4
	



end     
      












